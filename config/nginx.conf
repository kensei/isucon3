user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /var/run/nginx.pid;

events {
    worker_connections 2048;
    multi_accept on;
    use epoll;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # ログ解析に使う部分は LTSV ぽくしよう
    log_format  isucon '$time_local $msec\t$status\treqtime:$request_time\t'
                       'in:$request_length\tout:$bytes_sent\trequest:$request\t'
                       'acceptencoding:$http_accept_encoding\treferer:$http_referer\t'
                       'ua:$http_user_agent';

    # 計測時は access_log off; で性能稼げる.
    access_log  /var/log/nginx/access.log  isucon;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  120;

    #gzip  on;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    #include /etc/nginx/conf.d/*.conf;

    upstream isucon {
        server 127.0.0.1:5000;
        keepalive 4;  # 頻繁にアプリサーバーへの再接続をして TIME_WAIT で死ぬのを防ぐ.
    }

    server {
        listen       80;
        server_name  localhost;

        # 静的ファイルがある場所を指定
        root         /home/isu-user/isucon/webapp/public;

        # 静的ファイルを正規表現でマッチさせて nginx に返させる
        location ~ .*\.(css|js|ico)$ {
        }

        location / {
            # uwsgi にするときは uwsgi_pass;
            # proxy_pass http://isucon;
            # デフォルトで HTTP ヘッダは転送されるけど、 Host は明示的に指定しないと転送されない
            proxy_set_header Host $host;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    root         html;
    #    location / {
    #    }
    #}
}
